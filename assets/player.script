-- Lógica do Player

-- Variavel que controla a velocidade de movimento do player no ar
local air_acceleration_factor = 0.8
-- Velocidade maxima do player
local max_speed = 250
-- Gravidade do player
local gravity = -1900
-- Multiplicador da velocidade do player no começo do pulo
local jump_takeoff_speed = 800
-- Vida do player
local player_health = 5


-- Hash IDS para interagir com o cenario
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local msg_trigger_response = hash("trigger_response")
local group_key = hash("key")
local group_book = hash("book")
local group_gem = hash("gem")
local group_obstacle = hash("ground")
local group_danger = hash("danger")
local group_enemy = hash("enemy_hit")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local input_attack = hash("attack")
local anim_walk = hash("run")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_attack = hash("attack")
local anim_die = hash("die")
local anim_hit = hash("hit")


function init(self)
	-- Permite o uso dos inputs do player
	msg.post(".", "acquire_input_focus")

	-- Ativa a camera na collection do player
	msg.post("camera", "acquire_camera_focus")

	-- velocidade inicial do player
	self.velocity = vmath.vector3(0, 0, 0)
	-- Variavel de suporte para lidar com alteraçoes de colisão
	self.correction = vmath.vector3()
	-- Se o player está em contato com o chão
	self.ground_contact = false
	-- Animação atual
	self.anim = nil
	-- Se o player levou dano
	self.hit = false
	-- Se o player morreu
	self.dead = false
	-- Vida do player
	self.player_health = 5
	-- Se o item key foi adquirido
	self.key = false
	-- Se o item book foi adquirido
	self.book = false
	-- Se o item gem foi adquirido
	self.gem = false
	-- Se todas as condições foram checkadas para acabar o jogo
	self.pass_to_victory = false
end

local function play_animation(self, anim)
	-- Verifica se a animação já está ativa
	if self.anim ~= anim then
		-- Muda a animção do sprite
		sprite.play_flipbook("#sprite", anim)
		-- Salva a animação atual
		self.anim = anim
	end
end

local function hit(self)
	self.hit = false
end
local function dead(self)
	self.dead = false
end

local function update_animations(self)
	-- Confere se o sprite está na direção correta
	sprite.set_hflip("#sprite", self.velocity.x < 0)
	-- Verificações para as animaçoes
	if self.ground_contact then
		if self.hit then
			play_animation(self, anim_hit)
			timer.delay(0.6, false, hit)
		elseif self.dead then
			self.velocity.x = 0
			self.velocity.y = 0
			play_animation(self, anim_die)
			timer.delay(2, false, dead)
		elseif self.attacking then
			play_animation(self, anim_attack)	
		elseif self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function update(self, dt)
	-- Aplica a gravidade
	self.velocity.y = self.velocity.y + gravity * dt

	-- Movimenta o player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- Atualiza as animações do sprite
	update_animations(self)
	
	-- Reseta as condições
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
	self.attacking = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- Projeta a correção acumulada 
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			-- Aplica compensação
			go.set_position(go.get_position() + comp)
			-- Acumula a correção
			self.correction = self.correction + comp
		end
	end

	-- Colisão com parede
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- Colisão com o chão
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- Colisão com o teto
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

local function handle_player_damage(self)
	-- Rebound quando levar dano
	local pos = go.get_position()
	pos = pos + (self.velocity * -1) / 10
	go.set_position(pos)
	self.player_health = self.player_health - 1
	self.hit = true
	-- Se a vida chegar a 0, o player morre
	if self.player_health <= 0 then
		inipos = vmath.vector3(109, 86, 1)
		go.set_position(inipos)
		self.player_health = 5
	end
end

local function items_to_victory(self)
	-- Verifica as condiçoes
	if self.key and self.book and self.gem then
		self.pass_to_victory = true
	end
end

local function all_to_victory(self)
	-- Verifica a condição para vitoria
	if self.pass_to_victory then
		msg.post("/YouWin", "enable")
	end
	
end

function on_message(self, message_id, message, sender)
	-- Recebe as mensagens de colisão 
	if message_id == msg_trigger_response and sender.fragment == hash("hit") then
		if message.enter then
			-- Inimigo
			if message.group == group_enemy then
				handle_player_damage(self)
			-- Espinhos
			elseif message.group == group_danger then
				handle_player_damage(self)
			-- Item Key
			elseif message.group == group_key then
				self.key = true
				items_to_victory(self)
				all_to_victory(self)
			-- Item Book
			elseif message.group == group_book then
				print("Book adquired")
				self.book = true
				items_to_victory(self)
			-- Item Gem
			elseif message.group == group_gem then
				print("Gem adquired")
				self.gem = true
				items_to_victory(self)
			end
		end
	end
	-- Recebe as mensagens de colisão
	if message_id == msg_contact_point_response then
		-- Chão
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- Somente se estiver no chão
	if self.ground_contact then
		-- Velocidade de pulo inicial
		self.velocity.y = jump_takeoff_speed
		-- Animação de pulo
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- Interrompe o pulo
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	-- Se estiver no chão
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		-- Move devagar no ar
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

local function attack(self)
	if self.ground_contact then
		self.attacking = true
	end
end

function on_input(self, action_id, action)
	-- Recebe os inputs
	if action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	elseif action_id == input_attack then
		attack(self)
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end